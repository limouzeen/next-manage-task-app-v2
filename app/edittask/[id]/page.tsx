"use client";

import Image from "next/image";
import tasklogo from "./../../../assets/images/tasklogo.png";
import Link from "next/link";
import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";

// 1. **IMPORT UTILITIES**
import { db } from "./../../../lib/firebaseClient"; // DB from Firebase
import { supabase } from "./../../../lib/supabaseClient"; // <-- üî• Storage from Supabase
import { doc, getDoc, updateDoc, serverTimestamp } from "firebase/firestore";
import { FirebaseError } from "firebase/app";

// **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Collection ‡πÅ‡∏•‡∏∞ Bucket**
const FIRESTORE_COLLECTION = "task_tb"; // Collection ‡πÉ‡∏ô Firestore
const SUPABASE_BUCKET = "task_bk"; // <-- üî• Bucket ‡πÉ‡∏ô Supabase

// 2. **üî• HELPER FUNCTION ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Path ‡∏à‡∏≤‡∏Å SUPABASE URL**
function extractPathFromSupabaseUrl(publicUrl: string): string | null {
  try {
    const u = new URL(publicUrl);
    const marker = `/public/${SUPABASE_BUCKET}/`;
    const i = u.pathname.indexOf(marker);
    if (i === -1) return null;

    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô bucket
    // ‡πÄ‡∏ä‡πà‡∏ô "167...-image.jpg"
    return u.pathname.slice(i + marker.length);
  } catch {
    return null;
  }
}


export default function Page() {
  const params = useParams<{ id: string }>();
  const taskId = params?.id;

  const router = useRouter();

  // (‡∏™‡πà‡∏ß‡∏ô State ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
  const [title, setTitle] = useState<string>("");
  const [detail, setDetail] = useState<string>("");
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [isCompleted, setIsCompleted] = useState<boolean>(false);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const [oldImageUrl, setOldImageUrl] = useState<string | null>(null);

  // (‡∏™‡πà‡∏ß‡∏ô useEffect ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  useEffect(() => {
    if (!taskId) return;
    const fetchTaskById = async () => {
      const taskDocRef = doc(db, FIRESTORE_COLLECTION, taskId);
      try {
        const docSnap = await getDoc(taskDocRef);
        if (docSnap.exists()) {
          const data = docSnap.data();
          setTitle(data.title ?? "");
          setDetail(data.detail ?? "");
          setIsCompleted(data.isCompleted ?? false);
          setPreviewImage(data.imageUrl ?? null);
          setOldImageUrl(data.imageUrl ?? null);
        } else {
          console.error("No such document!");
          alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç");
          router.push("/alltask");
        }
      } catch (error) {
        console.error("Error fetching document:", error);
        alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
      }
    };
    fetchTaskById();
  }, [taskId, router]);

  // (‡∏™‡πà‡∏ß‡∏ô handleImageChange ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImageFile(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  // 3. **üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç LOGIC ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SUPABASE STORAGE**
  const handleUpdateTask = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();
    if (!taskId) return;

    let newImageUrl = oldImageUrl; // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ URL ‡πÄ‡∏Å‡πà‡∏≤

    try {
      // 1. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà SUPABASE
      if (imageFile) {
        const filePath = `${Date.now()}-${imageFile.name}`;
        
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        const { error: uploadError } = await supabase.storage
          .from(SUPABASE_BUCKET)
          .upload(filePath, imageFile);
        if (uploadError) throw uploadError;

        // ‡∏î‡∏∂‡∏á Public URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
        const { data } = supabase.storage
          .from(SUPABASE_BUCKET)
          .getPublicUrl(filePath);
        newImageUrl = data.publicUrl;

        // 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ URL ‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å SUPABASE
        if (oldImageUrl) {
          const oldPath = extractPathFromSupabaseUrl(oldImageUrl);
          if (oldPath) {
            const { error: deleteError } = await supabase.storage
              .from(SUPABASE_BUCKET)
              .remove([oldPath]);
            if (deleteError) {
              console.warn("‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å Supabase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", deleteError);
            }
          }
        }
      }

      // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô FIREBASE FIRESTORE (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
      const taskDocRef = doc(db, FIRESTORE_COLLECTION, taskId);
      await updateDoc(taskDocRef, {
        title,
        detail,
        isCompleted,
        imageUrl: newImageUrl, // ‡πÉ‡∏ä‡πâ URL ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Supabase
        updatedAt: serverTimestamp(),
      });

      alert("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      router.push("/alltask");

    } catch (error) {
      console.error("Error updating task:", error);
      alert("‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö");
    }
  };

  return (
    // (‡∏™‡πà‡∏ß‡∏ô JSX ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
    <div className="pt-20">
      <div className="flex flex-col items-center">
        <Image src={tasklogo} alt="tasklogo" width={100} height={100} />
        <h1 className="text-xl font-bold mt-5 mb-7">Manage Task App</h1>
      </div>
      <div className="max-w-3xl w-full border border-gray-500 p-10 mx-auto rounded-xl">
        <h1 className="text-xl font-bold text-center">üîÉ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô</h1>
        <form onSubmit={handleUpdateTask} className="w-full space-y-4">
          <div>
            <label className="block mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
            <input
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              type="text"
              className="w-full border rounded-lg p-2"
              required
            />
          </div>
          <div>
            <label className="block mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
            <textarea
              value={detail}
              onChange={(e) => setDetail(e.target.value)}
              className="w-full border rounded-lg p-2"
              rows={5}
              required
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</label>
            <input
              id="fileInput"
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
            />
            <label
              htmlFor="fileInput"
              className="inline-block cursor-pointer text-white hover:bg-violet-600 px-4 py-2 rounded border bg-violet-400 text-center"
            >
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
            </label>
          </div>
          {previewImage && (
            <div className="mt-2">
              <img
                src={previewImage}
                alt="Preview"
                className="w-36 h-36 object-cover rounded-md"
              />
            </div>
          )}
          <div>
            <label className="block mb-1">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
            <select
              className="w-full border rounded-lg p-2 mb-2"
              value={isCompleted ? "1" : "0"}
              onChange={(e) => setIsCompleted(e.target.value === "1")}
            >
              <option value="0">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</option>
              <option value="1">‚úîÔ∏è ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
            </select>
          </div>
          <div>
            <button
              type="submit"
              className="text-white hover:bg-violet-600 block px-4 py-2 rounded border bg-violet-400 text-center"
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏á‡∏≤‡∏ô
            </button>
          </div>
        </form>
        <Link
          href="/alltask"
          className="text-violet-400 hover:text-violet-600 block px-4 py-2 rounded text-center mt-10"
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </Link>
      </div>
    </div>
  );
}