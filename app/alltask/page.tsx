"use client";

import Image from "next/image";
import tasklogo from "./../../assets/images/tasklogo.png";
import Link from "next/link";
import { useState, useEffect } from "react";

// 1. **IMPORT UTILITIES ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á FIREBASE ‡πÅ‡∏•‡∏∞ SUPABASE**
import { db } from "./../../lib/firebaseClient"; 
import { supabase } from "./../../lib/supabaseClient"; // <-- üî• IMPORT SUPABASE CLIENT
import {
  collection,
  getDocs,
  deleteDoc,
  doc,
  query,
  orderBy,
  QueryDocumentSnapshot,
  DocumentData,
} from "firebase/firestore";

// (Type Task ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
type Task = {
  id: string; 
  created_at: string;
  title: string;
  detail: string;
  image_url: string;
  is_completed: boolean;
  updated_at: string;
};

// 2. **üî• ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Helper function ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á Path ‡∏à‡∏≤‡∏Å SUPABASE URL**
function extractPathFromSupabaseUrl(publicUrl: string): string | null {
  try {
    const u = new URL(publicUrl);
    // Path ‡πÉ‡∏ô Supabase URL ‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏•‡∏±‡∏á /public/
    // ‡πÄ‡∏ä‡πà‡∏ô: /storage/v1/object/public/task_images/167...jpg
    const marker = "/public/";
    const i = u.pathname.indexOf(marker);
    if (i === -1) return null;

    // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ "task_images/167...jpg" ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Bucket + Path
    return u.pathname.slice(i + marker.length);
  } catch {
    return null;
  }
}

// **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Collection ‡πÅ‡∏•‡∏∞ Bucket**
const COLLECTION_NAME = "task_tb";
const SUPABASE_BUCKET_NAME = "task_bk"; // <-- üî• ‡∏ä‡∏∑‡πà‡∏≠ Bucket ‡πÉ‡∏ô Supabase

export default function Page() {
  const [tasks, setTasks] = useState<Task[]>([]);

  // (‡∏™‡πà‡∏ß‡∏ô useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firestore ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
  useEffect(() => {
    const fetchTasks = async () => {
      try {
        const tasksCol = collection(db, COLLECTION_NAME);
        const q = query(tasksCol, orderBy("created_at", "desc"));
        const taskSnapshot = await getDocs(q);
        
        const taskList: Task[] = taskSnapshot.docs.map((docSnapshot: QueryDocumentSnapshot<DocumentData>) => {
          const data = docSnapshot.data();
          return {
            id: docSnapshot.id,
            title: data.title as string,
            detail: data.detail as string,
            image_url: data.image_url as string || '',
            is_completed: data.is_completed as boolean,
            created_at: (data.created_at && typeof data.created_at === 'object' && 'toDate' in data.created_at)
              ? data.created_at.toDate().toISOString()
              : data.created_at as string,
            updated_at: (data.updated_at && typeof data.updated_at === 'object' && 'toDate' in data.updated_at)
              ? data.updated_at.toDate().toISOString()
              : data.updated_at as string,
          } as Task;
        });
        setTasks(taskList);
      } catch (error) {
        console.error("Error fetching tasks from Firestore:", error instanceof Error ? error.message : "An unknown error occurred");
      }
    };
    fetchTasks();
  }, []);

  // 3. **üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç DELETE LOGIC ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ SUPABASE STORAGE**
  const handleDelete = async (id: string) => {
    if (!confirm("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")) return;

    const task = tasks.find(t => t.id === id);
    const oldUrl = task?.image_url || "";
    // ‡πÉ‡∏ä‡πâ helper function ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Supabase
    const storagePathWithBucket = oldUrl ? extractPathFromSupabaseUrl(oldUrl) : null; 

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    try {
      const docRef = doc(db, COLLECTION_NAME, id);
      await deleteDoc(docRef);
    } catch (dbError) {
      console.error("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", dbError);
      alert("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      return;
    }

    // ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô SUPABASE STORAGE
    if (storagePathWithBucket) {
      // Supabase remove() ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° bucket)
      // "task_images/167...jpg" -> "167...jpg"
      const filePathOnly = storagePathWithBucket.replace(`${SUPABASE_BUCKET_NAME}/`, '');
      
      try {
        const { error: deleteError } = await supabase.storage
          .from(SUPABASE_BUCKET_NAME)
          .remove([filePathOnly]); // .remove ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Array ‡∏Ç‡∏≠‡∏á path

        if (deleteError) {
          throw deleteError;
        }
      } catch (deleteError) {
        console.warn("‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÉ‡∏ô Supabase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", deleteError);
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    setTasks(prev => prev.filter((t) => t.id !== id));
  };

  return (
    <div className="p-20">
      {/* ‡∏™‡πà‡∏ß‡∏ô JSX ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á */}
      <div className="flex flex-col items-center">
        <Image src={tasklogo} alt="tasklogo" width={100} height={100} />
        <h1 className="text-xl font-bold mt-5 mb-7">Manage Task App</h1>
      </div>
      <div className="flex flex-row-reverse">
        <Link
          href="/addtask"
          className="text-white hover:bg-violet-600 block px-4 py-2 rounded border bg-violet-400 text-center"
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô
        </Link>
      </div>
      <div className="mt-5 mb-5">
        <table className="min-w-full border border-grat-700 text-sm">
          <thead className="bg-gray-100">
            <tr>
              <th className="border p-2">‡∏£‡∏π‡∏õ</th>
              <th className="border p-2">Title</th>
              <th className="border p-2">Detail</th>
              <th className="border p-2">Status</th>
              <th className="border p-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°</th>
              <th className="border p-2">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</th>
              <th className="border p-2">Action</th>
            </tr>
          </thead>
          <tbody>
            {tasks.map((task) => (
              <tr key={task.id}>
                <td className="border p-2">
                  {task.image_url ? (
                    <Image
                      className="mx-auto w-12 h-12 object-cover rounded"
                      src={task.image_url}
                      alt="taskimage"
                      width={50}
                      height={50}
                      sizes="50px"
                      style={{ objectFit: 'cover' }}
                    />
                  ) : (
                    <span className="text-gray-400 italic">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ</span>
                  )}
                </td>
                <td className="border p-2">{task.title}</td>
                <td className="border p-2">{task.detail}</td>
                <td className="border p-2 text-center">
                  {task.is_completed ? "Completed" : "Not Completed"}
                </td>
                <td className="border p-2 text-center">{task.created_at}</td>
                <td className="border p-2 text-center">{task.updated_at}</td>
                <td className="border p-2 text-center">
                  <Link
                    href={`/edittask/${task.id}`}
                    className="text-violet-500 hover:text-violet-700 underline px-2 text-center"
                  >
                    ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  </Link>
                  <button onClick={() => handleDelete(task.id)} className="text-red-500 hover:text-red-700 underline cursor-pointer px-2">
                    ‡∏•‡∏ö
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <Link
        href="/"
        className="text-violet-400 hover:text-violet-600 block px-4 py-2 rounded text-center mt-10"
      >
        ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      </Link>
    </div>
  );
}