"use client";

import Image from "next/image";
import tasklogo from "./../../assets/images/tasklogo.png";
import Link from "next/link";
import { useState } from "react";
import { useRouter } from "next/navigation";

// 1. **IMPORT FIREBASE (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DB) ‡πÅ‡∏•‡∏∞ SUPABASE (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö STORAGE)**
import { db } from "./../../lib/firebaseClient"; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firestore
import { collection, addDoc } from "firebase/firestore";
import { supabase } from "./../../lib/supabaseClient"; // <-- IMPORT SUPABASE CLIENT

// **‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠ Collection**
const COLLECTION_NAME = "task_tb";
const SUPABASE_BUCKET_NAME = "task_bk"; // <-- ‡∏ä‡∏∑‡πà‡∏≠ Bucket ‡πÉ‡∏ô Supabase

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Firestore (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
interface NewTaskData {
  title: string;
  detail: string;
  image_url: string;
  is_completed: boolean;
  created_at: string;
  updated_at: string;
}

export default function Page() {
  const [title, setTitle] = useState<string>('');
  const [detail, setDetail] = useState<string>('');
  const [imageFile, setImageFile] = useState<File | null>(null); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠ state ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô File
  const [is_completed, setIsCompleted] = useState<boolean>(false);
  const [previewImage, setPreviewImage] = useState<string | null>(null);
  const router = useRouter();

  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setImageFile(file);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  const handleSaveTask = async (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    let imageUrl: string = "";

    // 2. **üî• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏∂‡πâ‡∏ô SUPABASE STORAGE**
    if (imageFile) {
      const filePath = `${Date.now()}-${imageFile.name}`;
      try {
        // ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà Bucket ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        const { error: uploadError } = await supabase.storage
          .from(SUPABASE_BUCKET_NAME)
          .upload(filePath, imageFile);

        if (uploadError) {
          throw uploadError; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà catch block
        }

        // ‡∏î‡∏∂‡∏á Public URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        const { data } = supabase.storage
          .from(SUPABASE_BUCKET_NAME)
          .getPublicUrl(filePath);
        
        imageUrl = data.publicUrl; // ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠ URL ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á Firestore

      } catch (error) {
        console.error("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Supabase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        alert("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        return;
      }
    }

    // 3. **‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á FIREBASE FIRESTORE (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)**
    try {
      const taskData: NewTaskData = {
        title: title,
        detail: detail,
        image_url: imageUrl, // <-- ‡πÉ‡∏ä‡πâ URL ‡∏à‡∏≤‡∏Å Supabase
        is_completed: is_completed,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };

      await addDoc(collection(db, COLLECTION_NAME), taskData);

      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
      if(previewImage) {
        URL.revokeObjectURL(previewImage);
      }
      router.push("/alltask");

    } catch (error) {
      console.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Firestore ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  };

  return (
    <div className="pt-20">
      {/* ‡∏™‡πà‡∏ß‡∏ô JSX ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á */}
      <div className="flex flex-col items-center">
        <Image src={tasklogo} alt="tasklogo" width={100} height={100} />
        <h1 className="text-xl font-bold mt-5 mb-7">Manage Task App</h1>
      </div>
      <div className="w-3xl border border-gray-500 p-10 mx-auto rounded-xl">
        <h1 className="text-xl font-bold text-center">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà</h1>
        <form onSubmit={handleSaveTask} className="w-full space-y-4">
          <div>
            <label>‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô</label>
            <input
              onChange={(e) => setTitle(e.target.value)}
              type="text"
              className="w-full border rounded-lg p-2"
              required
            />
          </div>
          <div>
            <label>‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</label>
            <textarea
              onChange={(e) => setDetail(e.target.value)}
              className="w-full border rounded-lg p-2"
              rows={5}
              required
            />
          </div>
          <div>
            <label className="block mb-1 font-medium">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ</label>
            <input
              id="fileInput"
              type="file"
              accept="image/*"
              onChange={handleImageChange}
              className="hidden"
            />
            <label htmlFor="fileInput" className="inline-block cursor-pointer text-white hover:bg-violet-600 px-4 py-2 rounded border bg-violet-400 text-center">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ
            </label>
          </div>
          {previewImage && (
            <div className="mt-2">
              <Image
                src={previewImage}
                alt="Preview"
                width={150}
                height={150}
                sizes="150px"
                style={{ objectFit: 'cover' }}
              />
            </div>
          )}
          <div>
            <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</label>
            <select className="w-full border rounded-lg p-2 mb-2"
              value={is_completed? "1" : "0"}
              onChange={(e) => setIsCompleted(e.target.value === "1")}>
              <option value="0">‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à</option>
              <option value="1">‚úîÔ∏è ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</option>
            </select>
          </div>
          <div>
            <button type="submit" className="text-white hover:bg-violet-600 block px-4 py-2 rounded border bg-violet-400 text-center">
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
            </button>
          </div>
        </form>
        <Link
          href="/alltask"
          className="text-violet-400 hover:text-violet-600 block px-4 py-2 rounded text-center mt-10"
        >
          ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        </Link>
      </div>
    </div>
  );
}